// automatically generated by the FlatBuffers compiler, do not modify

package kr.co.jarvisk.flatbuffers.protocol;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class Hello extends Table {
  public static Hello getRootAsHello(ByteBuffer _bb) { return getRootAsHello(_bb, new Hello()); }
  public static Hello getRootAsHello(ByteBuffer _bb, Hello obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; }
  public Hello __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public String message() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer messageAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public String name() { int o = __offset(6); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer nameAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public int count() { int o = __offset(8); return o != 0 ? bb.getInt(o + bb_pos) : 0; }

  public static int createHello(FlatBufferBuilder builder,
      int messageOffset,
      int nameOffset,
      int count) {
    builder.startObject(3);
    Hello.addCount(builder, count);
    Hello.addName(builder, nameOffset);
    Hello.addMessage(builder, messageOffset);
    return Hello.endHello(builder);
  }

  public static void startHello(FlatBufferBuilder builder) { builder.startObject(3); }
  public static void addMessage(FlatBufferBuilder builder, int messageOffset) { builder.addOffset(0, messageOffset, 0); }
  public static void addName(FlatBufferBuilder builder, int nameOffset) { builder.addOffset(1, nameOffset, 0); }
  public static void addCount(FlatBufferBuilder builder, int count) { builder.addInt(2, count, 0); }
  public static int endHello(FlatBufferBuilder builder) {
    int o = builder.endObject();
    return o;
  }
  public static void finishHelloBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset); }
}

